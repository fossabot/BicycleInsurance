// Code generated by Microsoft (R) AutoRest Code Generator 0.12.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Raci.B2C.Bicycle.ClientApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class PoliciesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='contact'>
            /// </param>
            public static PolicyDTO SetContact(this IPolicies operations, long? id, PolicyContactDTO contact)
            {
                return Task.Factory.StartNew(s => ((IPolicies)s).SetContactAsync(id, contact), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='contact'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyDTO> SetContactAsync( this IPolicies operations, long? id, PolicyContactDTO contact, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<PolicyDTO> result = await operations.SetContactWithHttpMessagesAsync(id, contact, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='options'>
            /// </param>
            public static PolicyDTO SetPolicyOption(this IPolicies operations, long? id, PolicyOptionDTO options)
            {
                return Task.Factory.StartNew(s => ((IPolicies)s).SetPolicyOptionAsync(id, options), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='options'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyDTO> SetPolicyOptionAsync( this IPolicies operations, long? id, PolicyOptionDTO options, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<PolicyDTO> result = await operations.SetPolicyOptionWithHttpMessagesAsync(id, options, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionId'>
            /// </param>
            public static object MarkAsPaid(this IPolicies operations, string transactionId)
            {
                return Task.Factory.StartNew(s => ((IPolicies)s).MarkAsPaidAsync(transactionId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MarkAsPaidAsync( this IPolicies operations, string transactionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<object> result = await operations.MarkAsPaidWithHttpMessagesAsync(transactionId, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static PolicyDTO GetPolicy(this IPolicies operations, long? id)
            {
                return Task.Factory.StartNew(s => ((IPolicies)s).GetPolicyAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyDTO> GetPolicyAsync( this IPolicies operations, long? id, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<PolicyDTO> result = await operations.GetPolicyWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static long? Create(this IPolicies operations)
            {
                return Task.Factory.StartNew(s => ((IPolicies)s).CreateAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<long?> CreateAsync( this IPolicies operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<long?> result = await operations.CreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
