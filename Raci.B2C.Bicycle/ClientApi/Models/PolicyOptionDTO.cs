// Code generated by Microsoft (R) AutoRest Code Generator 0.12.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Raci.B2C.Bicycle.ClientApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// </summary>
    public partial class PolicyOptionDTO
    {
        /// <summary>
        /// Initializes a new instance of the PolicyOptionDTO class.
        /// </summary>
        public PolicyOptionDTO() { }

        /// <summary>
        /// Initializes a new instance of the PolicyOptionDTO class.
        /// </summary>
        public PolicyOptionDTO(string code, string description, double? annualPremium, string agreedValue, double? excess)
        {
            Code = code;
            Description = description;
            AnnualPremium = annualPremium;
            AgreedValue = agreedValue;
            Excess = excess;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "annualPremium")]
        public double? AnnualPremium { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "agreedValue")]
        public string AgreedValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "excess")]
        public double? Excess { get; set; }

        /// <summary>
        /// Validate the object. Throws ArgumentException or ArgumentNullException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (AnnualPremium == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AnnualPremium");
            }
            if (AgreedValue == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AgreedValue");
            }
            if (Excess == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Excess");
            }
        }
    }
}
